# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- azure-pipelines

pool:
  vmImage: ubuntu-latest

variables:
- group: docker

steps:
- task: Docker@2
  displayName: 'Docker build and publish'
  inputs:
    containerRegistry: 'camai-hub'
    repository: 'milease/camai-backend'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    buildContext: './CamAISolution'
    tags: 'camai-web-api'
- script: |
    echo "MS_SQL_PASS=$(docker.compose.MS_SQL_CONN) > .env"
    echo "MS_SQL_CONN=$(docker.compose.MS_SQL_PASS) >> .env"
    echo "STAGE=$(docker.compose.MS_SQL_PASS) >> .env"
  displayName: 'Write .env'
  workingDirectory: $(System.DefaultWorkingDirectory)
- task: CopyFilesOverSSH@0
  displayName: 'Copy compose file'
  inputs:
    sshEndpoint: 'ssh-server'
    contents: |
      docker-compose.yml
      .env
    targetFolder: 'backend'
    readyTimeout: '20000'
# - task: SSH@0
#   displayName: 'Pull and run image'
#   inputs:
#     sshEndpoint: 'ssh-server'
#     runOptions: 'inline'
#     inline: |
#       docker login -u $(docker.username) -p $(docker.password) $(docker.registry) 
#       cd backend
#       docker compose pull
#       docker compose stop
#       docker compose rm -f
#       docker compose up -d
#     readyTimeout: '20000'
- task: SSH@0
  displayName: 'Pull and run image'
  inputs:
    sshEndpoint: 'ssh-server'
    runOptions: 'inline'
    inline: |
      docker login -u $(docker.username) -p $(docker.password) $(docker.registry) 
      cd backend
      docker compose pull
      ls
    readyTimeout: '20000'
